.. meta::
   :description: PrimoGENI User's Guide
   :keywords: PrimoGENI, simulation, emulation, network simulation, network emulation, PRIME, PRIME, SSFNet

.. _slingshot-user-manual-label:

********************************
Slingshot User's Guide
********************************

For details on Slingshot's requirements take a look at :ref:`slingshot-requirements-label`. For details on starting Slingshot for the first time see :ref:`slingshot-running-label`.

=====================================
The Basics
=====================================

Slingshot has two views: *Model* and *Project*. The sections give you the general layout of both views.

.. _slingshot-model-view-label:

--------------------------------------------
The Model View
--------------------------------------------

.. image:: images/slingshot_modelview.png
  :width: 7in


|   

.. image:: images/slingshot_log_window.png 
  :width: 6in

1. **Network Graph:** Using `prefuse <http://prefuse.org>`_ we are able to display an interactive graph which allows you to view the topology of the network. Different node types have different shapes. When a node is selected it is highlighted in red. Selected nodes are accessible in the console as :samp:`sel`.
2. **Attribute tree:** The attribute tree allows you to explore the configuration of the of the selected model node. When the experiment is being executed the values under :menuselection:`runtime state` will be updated in real time so you can monitor the model execution. 

  .. note:: Currently you can only view properties/state of model nodes. The ability to modify them from the attribute tree is coming soon.

3. **Jython console:** In the console you are able to inspect and modify the model using a subset of `python <http://python.org>`_. We use `jython <http://www.jython.org/>`_ to implement this console. Below are a few important functions/variables that are available in the console; for details on the console see :ref:`slingshot-jython-console-label`. 

  * :samp:`sel` : the currently selected node.
  * :samp:`topnet` : the top-most network.
  * :samp:`exp` : the current experiment (:slingshot:`slingshot::experiment::PyExperiment` not :jprime:`jprime::Experiment`).
  * :samp:`dir` : list important variables/functions available in the console. For those who are familiar with python, :samp:`old_dir()` is the real :samp:`dir()`.
  * :samp:`help` : get information about a node, i.e. :samp:`help(topnet)` or :samp:`help(sel)`.
  
4. **Log:** Informational, warning, and error messages will be displayed here. 
5. **Views:** Slingshot has a :menuselection:`Model` view and a :menuselection:`Project` view; this is the model view. 
6. **Basic Controls:** The left icon is to save the current experiment and the right icon is to create a new experiment.
7. **Experiment Controls (1):** The left icon compiles the model (after a model is compiled it cannot be structurally modified). The middle icon executes the experiment. The right icon stops the experiment.
8. **Asynchronous Controls:** These controls allow you to attached and detach Slingshot from an active experiment. This functionality is not yet supported.
9. **Execution Environment Controls:** The left icon creates new execution environments and the right icon allows one to edit and delete existing environments.
10. **Visualization Controls:** The left icon re-renders the network graph and the right icon pauses the network graph.
11. **Experiment Controls (2):** The left icon compiles the model. The middle icon executes the experiment. The right icon graphs the runtime state the currently selected node in realtime using `LiveGraph <http://www.live-graph.org>`_.
12. **Console Controls:** The left icon saves the commands typed in the console and the right icon allows one to load a pre-scripted set of commands into the console.
13. **Log Controls:** The left icon saves the contents of the log to a file and the right icon clear the contents of the log.

.. _slingshot-project-view-label:

--------------------------------------------
Project View
--------------------------------------------

.. image:: images/slingshot_projectview.png
  :width: 7in

1. **Generated Models:** In this tutorial I chose to store my example models in this folder. In general, this folder holds the source topologies generated by Slingshot's internal topology generator.
2. **Project:** Each time an experiment is created a "project" folder is created. The folder can store user files (i.e. my_notes.txt). Additionally, Slingshot will store result files and such in this folder. To open an experiment you need only double click on its project folder.
3. **Editor:** Slingshot's built-in editor can edit xml, java, and python files with minimal syntax highlighting. Otherwise the editor functions as a simple text editor.
4. **Views:** Slingshot has a :menuselection:`Model` view and a :menuselection:`Project` view; this is the project view. 

========================================================
Creating, Editing, and Exporting Experiments
========================================================

This section details the primary ways to create and edit experiments in Slingshot.

------------------------------------------ 
Importing Models
------------------------------------------ 

Slingshot supports the importation of Java, Class (compiled java), Python, and XML models. To import a model you need to first create a new experiment by selecting the icon next to the disk icon (#6 in :ref:`slingshot-model-view-label`).  You could alternatively select :menuselection:`File --> Create Experiment`.  You will then be prompted with this dialog:

.. image:: images/slingshot_new_exp_general.png
  :width: 4in

Choose the name of the model after is it is imported and enter it on the form. Click :menuselection:`Browse` and choose the model you wish to import. After you click :menuselection:`Finish` it will take a few seconds to load the experiment. The first time you import a model Slingshot needs to load a number of classes and the JVM can be quite slow about this. After the model has been imported it will open the *Model* view for that experiment for you.

------------------------------------------ 
Starting From Scratch
------------------------------------------ 

To create an empty experiment select the icon next to the disk icon as shown above and you will see the new experiment dialog. Enter a name for your experiment and click :menuselection:`Finish`. When the model view opens there will not be a anything displayed in the graph visualization. This is because there is no network topology. The only object that is available is the *experiment*. To start creating your model you need a top-level network, which we call :samp:`topnet`. To create topnet type :samp:`topnet=exp.createTopNet("top")` you will see the following:

  >>> exp.createTopNet("top")
  [Net@15922932902]top
  >>> 

What you see printed has the format **[** *<node type>* **@** *<hash>* **]** *<node name>* . The hash will most likely be different for you. If you type :samp:`topnet` in the console will now see this:

  >>> topnet
  [Net@15922932902]top
  >>> 

The printout should be the same as the previous one. Now we have a topnet you can start adding subnets, hosts, routers, and links. To get help on what functions :samp:`topnet` has just type :samp:`help(topnet)` in the console. In general all the function used to build a java model are available in the console. Additionally, there are python versions of those functions which use named arguments to make it even easier. For more help on creating models take a look at the :ref:`quick-start-label` guide.

As you build your model you can click on the restart visualization icon (#10 in :ref:`slingshot-model-view-label`) to see the current network topology.

.. _slingshot-generator-label:

------------------------------------------ 
Generating Network Topologies
------------------------------------------

To generate a topology select :menuselection:`Tools --> Generate Model` and you will be presented with this dialog:

.. image:: images/slingshot_generate_1.png
  :width: 5in

Enter a name for your model and click next. At this point you should see this dialog:

.. image:: images/slingshot_generate_2.png
  :width: 5in

You should see four different topology generators listed on the left of the dialog. If you do not, that means you have probably forgotten to :samp:`make all` in the *topology* folder of the *primex* directory. The topology generator is just wrapping the external tools found in the topology directory. For details on the specific parameters of each generator please refer to their documentation: `BRITE <http://www.cs.bu.edu/brite/>`_, `INet <http://topology.eecs.umich.edu/inet/>`_, `GT-ITM <http://www.cc.gatech.edu/projects/gtitm/>`_). The topology generators only generate high-level router-topologies. You must attach hosts to these generated networks before you can add traffic and routing.

At this point you have two options: 

* Click :menuselection:`Finish` and the high-level router topology will be created.
* Click the check-box near the bottom the dialog to have the generator automatically attach hosts and subnets to the generated topology. If you this option you must click :menuselection:`Next`. 
   
  * You will see a small status window appear as the intermediate topology is generated. You then should then be presented with this this dialog:

  .. image:: images/slingshot_generate_3.png
    :width: 5in

  * Fill out the dialog as you see fit. The only thing to explain here is "Automatic duplication of subnets" option. If you choose this than all attached networks will be replicated copied of each other. See :ref:`architecture-replication-label` for details on what it means to be replicated.
  * Click :menuselection:`Finish`

At this point you be back at either the project or model views. If you are in the model view switch to the project view by click in the model view icon (#5 in :ref:`slingshot-model-view-label`).  If you expand the :menuselection:`GeneratedModels` folder is the :menuselection:`Project Explorer` you should see an XML file which contains your generated model. You import this model into Slingshot using the instructions above. 

------------------------------------------ 
Opening, Closing & Deleting Experiments
------------------------------------------


* **Opening** experiments is quite simple. Starting the project view, select the experiment you wish to open in the :menuselection:`Project Explorer`. You can double click on the experiment or use :menuselection:`Experiment --> Open Experiment`. After the experiment is open you will automatically be switched to the model view. If the experiment has not been compiled you can edit it using the console.

* **Closing** experiments can be done in two ways. One method is to select :menuselection:`Experiment --> Close Experiment` while in the model view. The second option is click on the "x" in the experiment's tab in the model view.

.. note:: In either case you may be prompted if you wish to save your model. If you choose not save the experiment this does not delete it; instead you may loose changes. Slingshot automatically persists models to the database in the background. Saving merely flushes all the changes to the database to ensure the model is consistent on disk.

* **Deleting** experiments is done by right selecting and right clicking on the experiment folder from the :menuselection:`Project Explorer` in the project view and selecting :menuselection:`Delete`.


------------------------------------------ 
Exporting Experiments
------------------------------------------

To export an experiment to an XML file, select :menuselection:`Experiment --> Export Model` and you will see this following dialog:

.. image:: images/slingshot_export_model.png
  :width: 4in

You can enter any filename you wish and slick :menuselection:`Save`.


.. _slingshot-jython-console-label:

=====================================
The Jython Console & Log Window
=====================================

------------------------------------------ 
The Jython Console
------------------------------------------ 

In the console you are able to inspect and modify the model using a subset of `python <http://python.org>`_.  Below are a few important functions and variables that are available in the console.

  * :samp:`sel` : This is the currently selected node. The node will be highlighted in red in the network graph and its properties will be display in the attribute tree.
  * :samp:`topnet` : All models must have a top-most network. This give you direct access to that network. It is also accessible by :samp:`exp.getTopNet()`.
  * :samp:`exp` : The current :slingshot:`PyExperiment  <slingshot::experiment::PyExperiment>` object. The standard :jprime:`Java experiment <jprime::Experiment>` object is available via :samp:`exp.getExperiment()`.
  * :samp:`dir` : :samp:`dir()` lists important variables and functions available in the console. For those who are familiar with python, :samp:`old_dir()` is the original python :samp:`dir()`; our version filters a few unrelated functions and prints them in a prettier format.
  * :samp:`help` : :samp:`help()` retrieves information about a model node, i.e. :samp:`help(topnet)` or :samp:`help(sel)`.

In addition to typing commands directly into the console you are able to:

  * **Save** your command history. To save your command history click on the disk icon in the console command group (#12 in :ref:`slingshot-model-view-label`). You will be prompted for a filename and location to store your command history.
  * **Load** a file of commands (i.e. script) into the console. To load a script click on the folder icon in the console command group (#12 in :ref:`slingshot-model-view-label`). You will be prompted for the script to load. The file will be executed line by line in the console.


------------------------------------------ 
Log Window
------------------------------------------ 

The log window displays information, warning, and error messages that are not shown via dialog boxes. You are able to:

  * **Save** the contents of the log to a file. To save your log click on the disk icon in the log command group (#13 in :ref:`slingshot-model-view-label`). You will be prompted for a filename and location to store your log.
  * **Clear** the contents of the log. To clear your log click on the document icon in the log command group (#13 in :ref:`slingshot-model-view-label`). You will see the following dialog:

    .. image:: images/slingshot_clear_log.png
      :width: 4in


=====================================
Runtime Environments
=====================================


Currently, Slingshot supports three types of execution environments:

* **Local Machine:** This environment can only execute models that contain simulated elements (i.e. no emulation!).
* **Remote Cluster:** This environment assumes that the cluster has been setup to execute PrimoGENI experiments. It differs from the PrimoGENI environment below in that we do not assume the cluster has implemented the GENI api. If you have already allocated a GENI *slice* and the compute nodes are running the PrimoGENI OS image you could run experiments on the slice using this environment type.
* **PrimoGENI:** This environment uses the `ProtoGENI <http:://www.protogeni.net>`_ api to allocate a resource *slice* to execute the experiment. It assumes that the chosen ProtoGENI cluster has the correct PrimoGENI OS image. 



------------------------------------------ 
Creating Environments
------------------------------------------ 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Local Environment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
To create a local environment follow these steps:

1. Click on the :menuselection:`Create New Environment` icon (#6 in :ref:`slingshot-model-view-label`).
2. Choose the :menuselection:`Local Machine` as the :menuselection:`Environment Type` and in the :menuselection:`Environment Name` choose a name, we have chosen "Local" as seen here:

  .. image:: images/slingshot_local_1.png
    :width: 4in

3. Click :menuselection:`Next`.

4. Specify the :menuselection:`Number of Processors`, here we have chosen to use 1 processor:

  .. image:: images/slingshot_local_2.png
    :width: 4in

5. Click :menuselection:`Finish` and the environment will be created.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
PrimoGENI Environment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

.. note:: If you have no idea what ProtoGENI or GENI are it might be best if your first visit the `ProtoGENI Tutorial <http://www.protogeni.net/trac/protogeni/wiki/Tutorial>`_.

Before we can create a PrimoGENI environment we need to setup an account at ProtoGENI site. Currently the only Utah and Miami sites support PrimoGENI. The Miami site is currently in development so we suggest using the Utah site. Below are basic steps to setup an account and create a PrimoGENI environment. If you already have your SSL certs from an existing account you can skip to step 5.

1. Get a `Emulab <http://www.emulab.net/>`_ account
2. Generate a SSL certificate

  1. Log onto your `emulab <http://www.emulab.net/login.php3>`_ account.
  2. Follow the :menuselection:`My Emulab` link in the upper left of the page.
  3. Select the :menuselection:`Profile` tab (the rightmost of the three).
  4. Follow the :menuselection:`Generate SSL Cert` link.
  5. Fill out the form and submit.
  6. Download your SSL cert (we will need this for the PrimoGENI environment).

3. Setup SSH keys

  1. This is necessary if you want to log into your compute nodes. 
  2. Follow these `instructions <http://www.protogeni.net/trac/protogeni/wiki/Tutorial#SSHKeys>`_ to generate your keys.

5. Click on the :menuselection:`Create New Environment` icon (#6 in :ref:`slingshot-model-view-label`).
6. Choose the :menuselection:`PrimoGENI` as the :menuselection:`Environment Type` and in the :menuselection:`Environment Name` choose a name.
7. Click :menuselection:`Next`.
8. Fill out this form:

  .. image:: images/slingshot_pg_2.png
    :width: 4in

  * **Certificate File:** the SSL certificate you generated and download from emulab.
  * **Passphase:** the passphrase you used when you generated your SSL certificate.
  * **# of Compute Nodes:** For this demo we will be using 1 compute node.

9. Click :menuselection:`Finish` and the environment will be created.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Cluster Environment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

To create a cluster environment follow these steps:

1. Click on the :menuselection:`Create New Environment` icon (#6 in :ref:`slingshot-model-view-label`).
2. Choose the :menuselection:`PrimoGENI` as the :menuselection:`Environment Type` and in the :menuselection:`Environment Name` choose a name.
3. Click :menuselection:`Next`.
4. Fill out this form:

  .. image:: images/slingshot_cluster_1.png
    :width: 4in

  * **Master node:** A PrimoGENI experiment requires a node to run a "master" controller, the control and data IP of this node should placed here.
  * **List of slave nodes:** Nodes which will execute the model are called "slave" nodes. Their IPs should be placed here. 

    .. note:: If your cluster does not have separate data and control networks they can be the same ip.

4. Click :menuselection:`Finish` and the environment will be created.

------------------------------------------ 
Editing & Deleting Environments
------------------------------------------ 

To edit or delete an environment click on the "Edit Environment" icon (#9 in :ref:`slingshot-model-view-label`). Alternatively, you could select :menuselection:`Experiment --> Edit Environment`. In either case, you should see this dialog:

.. image:: images/slingshot_edit_del_env.png
  :width: 4in

Choose the environment you wish to edit or delete from the list. 

* To **delete** the environment click :menuselection:`Delete Environment`. If the environment was automatically created from a PrimoGENI slice, you will be prompted to delete the slice. If you choose not to delete the slice at this time you must do so manually.
* To **edit** the environment click :menuselection:`Next` and you will be shown the environment's properties so you can edit them.

=====================================
Deploying Experiments
=====================================

------------------------------------------ 
Local Environment
------------------------------------------ 

1. Click on the :menuselection:`Execute Experiment` icon (#11 in :ref:`slingshot-model-view-label`). If the execute icon is not available you may have to compile first. 
2. You should now see the following dialog:
 
  .. image:: images/slingshot_local_3.png
    :width: 4in

  There a few things to explain here:

   * **Environment:** The environment which we want to execute the experiment on.
   * **Runtime:** How long to run the experiment for.
   * **Pace Simulation Speed:** Because simulation can execute much faster than real-time we may want to slow down how fast the experiment is executed. If we use :samp:`0` the simulator will run as fast as possible. If we use :samp:`0.5` the simulator will run half as fast as real-time. And if we use :samp:`1` the simulator will run in real-time.
   * **Visualize State Updates:** As the experiment is executed the simulator can export state changes to Slingshot for visualization. For very intense models this overhead could be quite high so we have the option to disable it.

3. Click :menuselection:`Finish` and the model will start executing. If you chose to visualize state updates the color of the nodes will change in response to the their `traffic intensity <http://en.wikipedia.org/wiki/Traffic_intensity>`_. The warmer the color the higher the intensity.

------------------------------------------ 
Cluster Environment
------------------------------------------ 

1. Click on the :menuselection:`Execute Experiment` icon (#11 in :ref:`slingshot-model-view-label`). If the execute icon is not available you may have to compile first. 
2. Select a Cluster environment that you previously created.
3. Choose how long you would like the experiment to run.
4. Click :menuselection:`Finish`. 

  .. note:: The meta controllers at the master and slave nodes must be running before the experiment is deployed.

------------------------------------------ 
PrimoGENI Environment
------------------------------------------ 

1. Click on the :menuselection:`Execute Experiment` icon (#11 in :ref:`slingshot-model-view-label`). If the execute icon is not available you may have to compile first. 

2. Select a Cluster environment that you previously created, here we have selected our UtahProtoGENI environment:
 
  .. image:: images/slingshot_pg_3.png
    :width: 4in

  There a few things to explain here:

   * **Environment:** The environment which we want to execute the experiment on.
   * **Runtime:** How long to run the experiment for.
   * **Slice Name:** A unique name which is used by ProtoGENI to identify the resources allocated to this experiment.

3. Click :menuselection:`Finish`. 

  * Unlike the other environments, PrimoGENI environments must first allocate and configure the compute nodes at the Utah site before the nodes can execute our experiment.
  * The status of your slice will be printed to the log during the process.
  * This process can take a very long time. Be patient.

4.  After the slice has been allocated and provisioned, Slingshot automatically creates a new environment which refers to the slice. You will see a dialog like this:

  .. image:: images/slingshot_pg_4.png
    :width: 4in

  * You will be able to redeploy experiments to this environment. 

5. You will be notified once the experiment has begun execution. You will see a dialog like this:

  .. image:: images/slingshot_pg_5.png
    :width: 4in

  .. note:: Sometimes the nodes do not all boot fast enough and the meta-controllers at all of the compute nodes are not ready. If this happens the experiment may fail to start. Don't worry, your time was not wasted. Just redeploy the experiment using the automatically created environment.


6. To release the slice resources you need to delete the environment that was automatically created in step 4. When you delete the slice you will see this dialog:

  .. image:: images/slingshot_pg_6.png
    :width: 4in

If you do not have Slingshot release the slice for you then you must do so manually!
