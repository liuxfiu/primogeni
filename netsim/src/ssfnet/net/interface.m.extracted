state_configuration {
	__PRIME__T1__="BaseInterface";
	__PRIME__T2__="BaseEntity";
	__PRIME__T1_TPL__="";
	__PRIME__T2_TPL__="";
	__PRIME__TYPEID__="";
	__PRIME__ALIAS__="";
	__PRIME__FILENAME__="/home/obaida/Desktop/pgc2vega/primex/netsim/src/ssfnet/net/interface.h";

		configurable IPAddress ip_address {
			type = OBJECT;
			default_value =  "0.0.0.0" ;
			unserialize_fct = str2ip;
			serialize_fct = ip2str;
			doc_string = "ip address";
			visualized=true;
		};
		configurable MACAddress mac_address {
			type = OBJECT;
			default_value =  "0:0:0:0:0:0" ;
			unserialize_fct = str2mac;
			serialize_fct = mac2str;
			doc_string = "mac address";
			visualized=false;
		};
		/** The link this interface is attached to. */
		Link* attached_link;
	};
state_configuration {
	__PRIME__T1__="GhostInterface";
	__PRIME__T2__="BaseInterface";
	__PRIME__T1_TPL__="";
	__PRIME__T2_TPL__="";
	__PRIME__TYPEID__="";
	__PRIME__ALIAS__="";
	__PRIME__FILENAME__="/home/obaida/Desktop/pgc2vega/primex/netsim/src/ssfnet/net/interface.h";

		configurable UID_t real_uid {
			type = INT;
			default_value =  "0" ;
			doc_string = "the uid of the remote node";
			visualized=true;
		};
		configurable UID_t community_id {
			type = INT;
			default_value =  "0" ;
			doc_string = "the id of the remote community";
			visualized=true;
		};
	};
state_configuration {
	__PRIME__T1__="Interface";
	__PRIME__T2__="BaseInterface";
	__PRIME__T1_TPL__="";
	__PRIME__T2_TPL__="";
	__PRIME__TYPEID__=" 0";
	__PRIME__ALIAS__= "Iface";
	__PRIME__FILENAME__="/home/obaida/Desktop/pgc2vega/primex/netsim/src/ssfnet/net/interface.h";

		shared configurable float bit_rate {
			type = FLOAT;
			default_value =  "1e10" ;
			doc_string = "transmit speed";
			visualized=true;
		};
		shared configurable float latency {
			type = FLOAT;
			default_value =  "0";
			doc_string = "transmit latency";
			visualized=true;
		};
		shared configurable float jitter_range {
			type = FLOAT;
			default_value =  "0" ;
			doc_string = "jitter range";
			visualized=true;
		};
		
		configurable float drop_probability {
			type = FLOAT;
			default_value =  "0" ;
			doc_string = "drop probability";
			visualized=true;
			statistic=true;
		};
		
		shared configurable int buffer_size {
			type = INT;
			default_value =  "65536" ;
			doc_string = "send buffer size";
			visualized=true;
		};
		shared configurable int mtu {
			type = INT;
			default_value =  "1500" ;
			doc_string = "maximum transmission unit";
			visualized=true;
		};
		shared configurable SSFNET_STRING queue_type {
			type= STRING;
			default_value="DropTailQueue";
			doc_string="The class to use for the queue.";
			visualized=true;
		};
		configurable bool is_on {
			type= BOOL;
			default_value="true";
			doc_string="is the interface on?";
			visualized=true;
			statistic=true;
		};
		configurable int num_in_packets {
			type= INT;
			default_value="0";
			doc_string="number of packets received";
			visualized=true;
			statistic=true;
		};
		configurable int num_in_bytes {
			type= INT;
			default_value="0";
			doc_string="number of bytes received";
			visualized=true;
			statistic=true;
		};
		configurable float packets_in_per_sec {
			type= FLOAT;
			default_value="0";
			doc_string="number of packets per second";
			visualized=false;
			statistic=true;
		};
		configurable float bytes_in_per_sec {
			type= FLOAT;
			default_value="0";
			doc_string="number of bytes per second";
			visualized=false;
			statistic=true;
		};
		configurable int num_in_ucast_packets {
			type= INT;
			default_value="0";
			doc_string="number of unicast packets received";
		};
		configurable int num_in_ucast_bytes {
			type= INT;
			default_value="0";
			doc_string="number of unicast bytes received";
		};
		configurable int num_out_packets {
			type= INT;
			default_value="0";
			doc_string="number of packets sent";
			visualized=true;
			statistic=true;
		};
		configurable int num_out_bytes {
			type= INT;
			default_value="0";
			doc_string="number of bytes sent";
			visualized=true;
			statistic=true;
		};
		configurable int num_out_ucast_packets {
			type= INT;
			default_value="0";
			doc_string="number of unicast packets sent";
		};
		configurable int num_out_ucast_bytes {
			type= INT;
			default_value="0";
			doc_string="number of unicast bytes sent";
		};
		configurable float packets_out_per_sec {
			type= FLOAT;
			default_value="0";
			doc_string="number of packets per second";
			visualized=false;
			statistic=true;
		};	
		configurable float bytes_out_per_sec {
			type= FLOAT;
			default_value="0";
			doc_string="number of bytes per second";
			visualized=false;
			statistic=true;
		};

		configurable int queue_size {
			type= INT;
			default_value="0";
			doc_string="quesize";
			visualized=true;
			statistic=true;
		};

		child_type<NicQueue> nic_queue {
			min_count = 0;
			max_count = 1;
			is_aliased = false;
			doc_string = "The queue for this nic";
		};

		child_type<EmulationProtocol> emu_proto {
			min_count = 0;
			max_count = 1;
			is_aliased = false;
			doc_string = "If this interface is emulated then this protcol must be set";
		};

		/** a cache of the emu proto*/
		EmulationProtocol* emu_protocol;

		/** The send queue maintained by this network interface. */
		NicQueue* tx_queue;

		/** The timer for packet transmission. */
		TxTimerQueue* tx_timer_queue;

		/** Caching a pointer to the IP session that manages this interface. */
		IPv4Session* ip_sess;

	};
