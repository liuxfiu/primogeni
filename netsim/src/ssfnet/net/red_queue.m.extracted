state_configuration {
	__PRIME__T1__="RedQueue";
	__PRIME__T2__="NicQueue";
	__PRIME__T1_TPL__="";
	__PRIME__T2_TPL__="";
	__PRIME__TYPEID__="";
	__PRIME__ALIAS__="";
	__PRIME__FILENAME__="/home/obaida/Desktop/pgc2vega/primex/netsim/src/ssfnet/net/red_queue.h";


		shared configurable float weight {
			type=FLOAT;
			default_value = "0";
			doc_string = "weight used by the AQM policy to calculate average queue length for each packet arrival";
			visualized=true;
		};
		shared configurable float qmin {
			type=FLOAT;
			default_value = "0";
			doc_string = "the min threshold (in bytes) for calculating packet drop probability";
			visualized=true;
		};
		shared configurable float qmax {
			type=FLOAT;
			default_value = "0";
			doc_string = "the max threshold (in bytes) for calculating packet drop probability";
			visualized=true;
		};
		shared configurable float qcap {
			type=FLOAT;
			default_value = "0";
			doc_string = "qcap for calculating packet drop probability";
			visualized=true;
		};
		shared configurable float pmax {
			type=FLOAT;
			default_value = "0.2";
			doc_string = "pmax for calculating packet drop probability";
			visualized=true;
		};
		shared configurable bool wait_opt {
			type=BOOL;
			default_value = "true";
			doc_string = "an option to avoid marking/dropping two packets in a row";
			visualized=true;
		};
		shared configurable int mean_pktsiz {
			type=INT;
			default_value = "500";
			doc_string = "mean packet size in bytes";
			visualized=true;
		};
		  /** Weight used by the AQM policy to calculate average queue length
		      ON EACH PACKET ARRIVAL. */
		  float weight;

		  /* Parameters to calculate packet drop probability based on the
		     average queue length x(t):
		       P(x)=0, if 0 <= x < qmin;
		       P(x)=(x-qmin)/(qmax_qmin)*pmax, if qmin <= x < qmax;
		       P(x)=(x-qmax)/(bufsize-qmax)*(1-pmax)+pmax, if x > qmax.
		     Both qmin and qmax are in bits.
		   */
		  float qmin; ///< Parameter to calculate packet drop probability.
		  float qmax; ///< Parameter to calculate packet drop probability.
		  float qcap; ///< Parameter to calculate packet drop probability.
		  float pmax; ///< Parameter to calculate packet drop probability.

		  /** This option is to avoid dropping two packets in a row. */
		  //bool wait_opt;

		  /** Mean packet size in bits. */
		  float mean_pktsiz;

		  /** The instantaneous queue size (in bits). */
		  float queue;

		  /** The average queue size (in bits). */
		  float avgque;

		  /** The loss probability calcuated from avg queue length. */
		  float loss;

		  /** False if the average queue length is crossing the min threshold
		      for the first time. */
		  bool crossing;

		  /** The number of bits arrived between two consecutive packet drops
		      (when the qmin threshold is crossed). */
		  float interdrop;

		  /** The time of the last queue update. */
		  VirtualTime last_update_time;

		  /** The time when the queue will be emptied. */
		  VirtualTime vacate_time;
	};
