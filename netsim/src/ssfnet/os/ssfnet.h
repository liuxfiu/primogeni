/**
 * \file ssfnet.h
 * \brief Header file for System-wide definitions and configurations.
 * \author Nathanael Van Vorst
 * 
 * Copyright (c) 2011 Florida International University.
 *
 * Permission is hereby granted, free of charge, to any individual or
 * institution obtaining a copy of this software and associated
 * documentation files (the "software"), to use, copy, modify, and
 * distribute without restriction.
 *
 * The software is provided "as is", without warranty of any kind,
 * express or implied, including but not limited to the warranties of
 * merchantability, fitness for a particular purpose and
 * non-infringement.  In no event shall Florida International
 * University be liable for any claim, damages or other liability,
 * whether in an action of contract, tort or otherwise, arising from,
 * out of or in connection with the software or the use or other
 * dealings in the software.
 *
 * This software is developed and maintained by
 *
 *   Modeling and Networking Systems Research Group
 *   School of Computing and Information Sciences
 *   Florida International University
 *   Miami, Florida 33199, USA
 *
 * You can find our research at http://www.primessf.net/.
 */

#ifndef __SSFNET_H__
#define __SSFNET_H__

#include "primex_config.h" // global configuration generated by autoconf
#include "os/ssfnet_types.h"

namespace prime {
namespace ssfnet {


#define convert_typeid_to_protonum(tid) (tid-10000)
#define convert_protonum_to_typeid(pno) (pno+10000)

/**
 * \brief enum Types of all implemented protocols.
 *
 * Protocol type (or protocol number) is used by both protocol
 * sessions and protocol messages to uniquely identify different
 * protocols. IP uses this number to demux upper-layer protocols.
 */
enum ProtocolType {
  /** Reserved type, which should not be used by any protocol. */
  SSFNET_PROTOCOL_TYPE_INVALID = 0,

  /* Full implementation of real network protocols. */

  /** Internet Control Message Protocol (ICMP). */
  SSFNET_PROTOCOL_TYPE_ICMPV4= 1,

  /** Internet Protocol (IP) version 4. */
  SSFNET_PROTOCOL_TYPE_IPV4 = 4,

  /** Transport Control Protocol (TCP). */
  SSFNET_PROTOCOL_TYPE_TCP =  6,

  /** User Datagram Protocol (UDP). */
  SSFNET_PROTOCOL_TYPE_UDP =  17,

  /** Simplified TCP protocol (STCP). */
  SSFNET_PROTOCOL_TYPE_STCP =  18,

  /** Open Shortest Path First (OSPF) protocol. */
  SSFNET_PROTOCOL_TYPE_OSPF = 89,

  /** This protocol type is used only by the DataMessage class (for
      an opaque payload). The protocol does not represent any
      protocols in the real world. */
  SSFNET_PROTOCOL_TYPE_OPAQUE_DATA = 203,

  /** Used for HTTP*/
  SSFNET_PROTOCOL_TYPE_HTTP_CLIENT = 204,
  SSFNET_PROTOCOL_TYPE_HTTP_SERVER = 205,

  /** Used for CBR*/
  SSFNET_PROTOCOL_TYPE_CBR = 206,

  /** Used for Swing*/
  SSFNET_PROTOCOL_TYPE_SWING_CLIENT = 210,
  SSFNET_PROTOCOL_TYPE_SWING_SERVER = 211,

  /** Used for Symbiotic simulation*/
  SSFNET_PROTOCOL_SYMBIOSIM_APP = 212,

  /** Used for fluid traffic to probe the next hop. */
  SSFNET_PROTOCOL_TYPE_PROBE =  213,

  /** Used for CNF*/
  SSFNET_PROTOCOL_TYPE_CNF_APP=214,
  SSFNET_PROTOCOL_TYPE_CNF_TRANS=215,
};

/**
 * \enum ProtocolSessionCtrlTypes
 *
 * General contrl types. User defined contrl types should use numbers
 * greater than 1000. The numbers below are reserved.
 */
enum ProtocolSessionCtrlTypes {
	/**
	 * Check if the protocol is at the bottom of the protocol stack. The
	 * ctrlmsg argument in this case is a pointer to a boolean value (of
	 * type bool), which is supplied by the caller for the callee to
	 * return value. The ProtocolSession class implements the default by
	 * returning the value false, since by default a protocol session is
	 * not the lowest in the protocol stack. The LowestProtocolSession
	 * class overrides this method and returns true for this control
	 * type. All protocol sessions that consider themselves functioning
	 * as the lowest protocol session (such as SimplePhy) should simply
	 * derive from the LowestProtocolSession class so that this control
	 * type is handled appropriately.
	 */
	PSESS_CTRL_SESSION_IS_LOWEST  = 1,

	/**
	 * Get the owner network interface if this protocol session belongs
	 * to a network interface (such as SimpleMac and SimplePhy). A
	 * pointer to an Interface object shall be returned through the
	 * ctrlmsg argument to the control method. The ProtocolSession class
	 * implements the default by returning an NULL, indicating a
	 * protocol session by default is not in a network interface. The
	 * NicProtocolSession class overrides the control method and returns
	 * the owner network interface. All protocol sessions that consider
	 * themselves functioning within a network interface (such as
	 * SimpleMac and SimplePhy) should derive from the
	 * NicProtocolSession class so that this control type is handled
	 * appropriately.
	 */
	PSESS_CTRL_SESSION_GET_INTERFACE = 2,

	/**
	 * Set the protocol session above the current one. This control type
	 * is applicable to a protocol session that belongs to a network
	 * interface (such as SimpleMac and SimplePhy). In the
	 * ProtocolSession class, this control type is simply ignored.  The
	 * NicProtocolSession class overrides the control method and
	 * establishes the connection among protocol sessions within the
	 * network interface. All protocol sessions that consider themselves
	 * functioning within a network interface (such as SimpleMac and
	 * SimplePhy) should derive from the NicProtocolSession class so
	 * that this control type is handled appropriately.
	 */
	PSESS_CTRL_SESSION_SET_PARENT = 3,

	/**
	 * Set the protocol session above the current one. This control type
	 * is applicable to a protocol session that belongs to a network
	 * interface (such as SimpleMac and SimplePhy). In the
	 * ProtocolSession class, this control type is simply ignored.  The
	 * NicProtocolSession class overrides the control method and
	 * establishes the connection among protocol sessions within the
	 * network interface. All protocol sessions that consider themselves
	 * functioning within a network interface (such as SimpleMac and
	 * SimplePhy) should derive from the NicProtocolSession class so
	 * that this control type is handled appropriately.
	 */
	PSESS_CTRL_SESSION_SET_CHILD  = 4,

	/*
	 * control commands for UDP
	 */
	UDP_CTRL_GET_MAX_DATAGRAM_SIZE = 71
};

} // namespace ssfnet
} // namespace prime

#endif /*__SSFNET_H__*/
