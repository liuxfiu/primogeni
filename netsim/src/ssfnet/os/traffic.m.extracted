state_configuration {
	__PRIME__T1__="TrafficType";
	__PRIME__T2__="BaseEntity";
	__PRIME__T1_TPL__="";
	__PRIME__T2_TPL__="";
	__PRIME__TYPEID__="";
	__PRIME__ALIAS__="";
	__PRIME__FILENAME__="/home/obaida/Desktop/pgc2vega/primex/netsim/src/ssfnet/os/traffic.h";

                shared configurable int traffic_type_seed {
                        type=INT;
                        default_value = "0" ;
                        doc_string = "traffic type's seed";
                };

         	   configurable CommunityIDList community_ids {
         	            type = OBJECT;
         	            default_value =  "[]" ;
         	            doc_string = "A comma separated list of the ids of the communities in this partition";
         	    };

                /**
                 * The random number generator, per traffic type. Each traffic type
                 * is expected to maintain a unique random stream, seeded initially
                 * as a function of the traffic type's UID.
                 */
                prime::rng::Random* rng = 0;

                /**
                 * If it's not zero, this is the random seed used by traffic
                 * types to initialize their random streams; if it's zero, all
                 * traffic types will shared the same random stream (rng).
                 */
                int rng_seed = 0;

        };
state_configuration {
	__PRIME__T1__="StaticTrafficType";
	__PRIME__T2__="TrafficType";
	__PRIME__T1_TPL__="";
	__PRIME__T2_TPL__="";
	__PRIME__TYPEID__="";
	__PRIME__ALIAS__="";
	__PRIME__FILENAME__="/home/obaida/Desktop/pgc2vega/primex/netsim/src/ssfnet/os/traffic.h";

        	   shared configurable ResourceIdentifier srcs {
        	            type = RESOURCE_ID;
        	            default_value =  "" ;
        	            doc_string = "XXX";
        	    };
                shared configurable ResourceIdentifier dsts {
                        type = RESOURCE_ID;
                        default_value = "" ;
                        doc_string = "XXX";
                };
                shared configurable DstIPVec dst_ips {
	 					type=OBJECT;
	 					default_value="[]";
						doc_string= "a list of emu/real nodes ips";
	 			};
                shared configurable float start_time {
                        type=FLOAT;
                        default_value="0";
                        doc_string="Time before the traffic starts (default: 0).";
                };
                shared configurable float interval {
                        type=FLOAT;
                        default_value="0.1";
                        doc_string="The time between sending each traffic (default: 0.1). ";
                };
                shared configurable bool interval_exponential {
                        type=BOOL;
                        default_value="false";
                        doc_string="Whether to use exponential interval (default: false).";
                };
                shared configurable SSFNET_STRING mapping {
						type=STRING;
						default_value="all2all";
						doc_string="The method to map the source and destination based on the src and dst lists";
                };

                int mapping;
                TrafficFlowList* traffic_flows;
                HybridTrafficFlowList* hybrid_traffic_flows;
        };

state_configuration {
	__PRIME__T1__="DynamicTrafficType";
	__PRIME__T2__="TrafficType";
	__PRIME__T1_TPL__="";
	__PRIME__T2_TPL__="";
	__PRIME__TYPEID__="";
	__PRIME__ALIAS__="";
	__PRIME__FILENAME__="/home/obaida/Desktop/pgc2vega/primex/netsim/src/ssfnet/os/traffic.h";

	__PRIME__EMPTY__;
	};
state_configuration {
	__PRIME__T1__="CentralizedTrafficType";
	__PRIME__T2__="DynamicTrafficType";
	__PRIME__T1_TPL__="";
	__PRIME__T2_TPL__="";
	__PRIME__TYPEID__="";
	__PRIME__ALIAS__="";
	__PRIME__FILENAME__="/home/obaida/Desktop/pgc2vega/primex/netsim/src/ssfnet/os/traffic.h";

        	   shared configurable ResourceIdentifier srcs {
        	            type = RESOURCE_ID;
        	            default_value =  "" ;
        	            doc_string = "XXX";
        	    };
                shared configurable ResourceIdentifier dsts {
                        type = RESOURCE_ID;
                        default_value = "" ;
                        doc_string = "XXX";
                };
        };

state_configuration {
	__PRIME__T1__="DistributedTrafficType";
	__PRIME__T2__="DynamicTrafficType";
	__PRIME__T1_TPL__="";
	__PRIME__T2_TPL__="";
	__PRIME__TYPEID__="";
	__PRIME__ALIAS__="";
	__PRIME__FILENAME__="/home/obaida/Desktop/pgc2vega/primex/netsim/src/ssfnet/os/traffic.h";

	__PRIME__EMPTY__;
	};
state_configuration {
	__PRIME__T1__="Traffic";
	__PRIME__T2__="BaseEntity";
	__PRIME__T1_TPL__="";
	__PRIME__T2_TPL__="";
	__PRIME__TYPEID__="";
	__PRIME__ALIAS__="";
	__PRIME__FILENAME__="/home/obaida/Desktop/pgc2vega/primex/netsim/src/ssfnet/os/traffic.h";

                child_type<TrafficType> traffic_types {
                        min_count = 0;
                        max_count = 0;
                        is_aliased = false;
                        doc_string = "traffic types of the traffic";
                };
        };
