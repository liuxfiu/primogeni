state_configuration {
	__PRIME__T1__="FluidQueue";
	__PRIME__T2__="NicQueue";
	__PRIME__T1_TPL__="";
	__PRIME__T2_TPL__="";
	__PRIME__TYPEID__="";
	__PRIME__ALIAS__="";
	__PRIME__FILENAME__="/home/obaida/Desktop/pgc2vega/primex/netsim/src/ssfnet/proto/fluid/fluid_queue.h";

		shared configurable SSFNET_STRING queue_type {
			type=STRING;
			default_value= "red";
			doc_string= "The type of the queue, must be red or droptail";
		};
		shared configurable bool is_red {
			type= BOOL;
			default_value= "true";
			doc_string= "Whether this queue is a RED queue, rather than a drop-tail";
		};
		/** This is the weight applied FOR EACH PACKET ARRIVAL. */
		shared configurable float weight {
			type= FLOAT;
			default_value= "0.0001";
			doc_string= "The parameter used by RED queue to estimate the average queue length, must be between 0 and 1";
		};
		shared configurable float qmin {
			type=FLOAT;
			default_value= "0";
			doc_string= "the min threshold (in bytes) for calculating packet drop probability.";
		};
		shared configurable float qmax {
			type=FLOAT;
			default_value= "0";
			doc_string= "the max threshold (in bytes) for calculating packet drop probability.";
		};
		/*shared configurable float qcap {
			type=FLOAT;
			default_value= "0";
			doc_string= "Parameter to calculate packet drop probability, must be positive.";
		};*/
		shared configurable float pmax {
			type=FLOAT;
			default_value= "0.2";
			doc_string= "Parameter to calculate packet drop probability, must be in the range (0,1].";
		};
		shared configurable bool wait_opt {
			type= BOOL;
			default_value= "true";
			doc_string= "This RED option is used to avoid marking/dropping two packets in a row";
		};
		shared configurable float mean_pktsiz {
			type= FLOAT;
			default_value= "500";
			doc_string= "Mean packet size in bytes used by RED to compute the average queue length, must be positive.";
		};
		/** Weight used by the AQM policy to calculate average queue length ON EACH PACKET ARRIVAL. */
		float weight;

		/* Parameters to calculate packet drop probability based on the average queue length x(t):
		  P(x)=0, if 0 <= x < qmin;
		  P(x)=(x-qmin)/(qmax_qmin)*pmax, if qmin <= x < qmax;
		  P(x)=(x-qmax)/(bufsize-qmax)*(1-pmax)+pmax, if x > qmax.
		  Both qmin and qmax are in bits.
		*/
		float qmin; ///< Parameter to calculate packet drop probability.
		float qmax; ///< Parameter to calculate packet drop probability.
		//float qcap; ///< Parameter to calculate packet drop probability.
		float pmax; ///< Parameter to calculate packet drop probability.

		/** This option is to avoid dropping two packets in a row. */
		//bool wait_opt;

		/** Mean packet size in bits. */
		float mean_pktsiz;

		/** Weight used by the AQM policy to calculate average queue
		 *  length. We assume it is an exponentially weighed moving average
		 *  based on samples taken every delta seconds.
		 */
		float fluid_weight=0;

		/** The propagation delay of this queue. */
		float prop_delay=0;

		/** The aggregate arrival of fluid flows into this queue. */
		float aggr_arrival=0;

		/** The total number of bits arrived as packet flows since the last Runge-Kutta step. */
		float pkt_arrival=0;

		/** The instantaneous queue size. */
		float queue=0;

		/** The average queue size. */
		float avgque=0;

		/** The packet drop probability. */
		float loss=0;

		/** The instantaneous queue size inherited from the corresponding variable maintained
		 * solely for packet arrivals between Runge-Kutta steps.
		 */
		float shadow_queue=0;

		/** The average queue size inherited from the corresponding variable maintained solely
		 *  for packet arrivals between Runge-Kutta steps.
		 */
		float shadow_avgque=0;

		/** The packet drop probability inherited from the corresponding variable maintained
		 * solely for packet arrivals between Runge-Kutta steps.
		 */
		float shadow_loss=0;

		/** For RED packet model only. False if the average queue length is crossing the min
		 * threshold for the first time.
		 */
		bool crossing=false;

		/** The number of bits arrived between two consecutive packet drops (when the qmin
		 * threshold is crossed). Used for RED packet model only.
		 */
		float interdrop=0;

		/** The time of the last queue length update. */
		VirtualTime last_update_time=0;

		/** The time of the last packet sent. */
		VirtualTime last_send_time=0;

	};
